#
# Do not edit this file directly
# Instead, add your customizations to group_vars/your-inventory-name/vars.yml
# For secret variables, use group_vars/your-inventory-name/vault.yml
#

#
# Misc
#
hostname: "{{ inventory_hostname }}"

timezone: Asia/Calcutta

dot_nameservers:
  [
    185.95.218.42@853#dns.digitale-gesellschaft.ch,
    94.140.15.140@853#dns-unfiltered.adguard.com,
  ]

ntp_timezone: "{{ timezone }}"

locale: en_US.UTF-8

lan_network: "192.168.0.0/24"

vpn_network: "100.108.204.19"

lan_gateway: "192.168.0.1"

dmz_network: "192.168.0.0/24"

dmz_gateway: "192.168.0.1"

dns_nameservers: ["1.1.1.1", "1.0.0.1"]

fish_prompt_color: blue

keyboard_layout: us

username: shikhar

guid: "1000"

shell: /usr/bin/zsh

docker_dir: /opt/docker/data

dotfiles_repo: https://github.com/shikharbhardwaj/dotfiles

boot_drive_serial: "PH4-CE120_511160923152003331"

enable_pikvm: true

pikvm_address: 192.168.0.102

enable_fritzbox: false

spindown_time: 600 # in seconds

colorscheme: nord

subdomains:
  {
    "nextcloud": "nextcloud",
    "vaultwarden": "vault",
    "seafile": "seafile",
    "rustpad": "pad",
    "etherpad": "pad",
  }

#
# Packages
#
extra_packages:
  - fish
  - iperf3
  - speedtest-cli
  - htop
  - stow
  - git
  - neofetch
  - neovim
  - tmux
  - mosh
  - rsync
  - lm-sensors
  - iotop
  - ncdu
  - hddtemp
  - reptyr
  - zsh

#
# Apt mirrors
#
version: focal

apt_mirror: http://in.archive.ubuntu.com/ubuntu/

#
# Email credentials (for SMART and Snapraid error reporting)
#

email_login: "{{ email }}"

email_smtp_host: smtp.gmail.com

email_smtp_port: 465

email_smtp_port_startls: 587

# MSMTP
msmtp_accounts:
  - account: mailbox
    host: "{{ email_smtp_host }}"
    port: "{{ email_smtp_port_startls }}"
    auth: "on"
    from: "{{ email }}"
    user: "{{ email }}"
    password: "{{ email_password }}"

msmtp_default_account: "mailbox"

msmtp_alias_default: "{{ email }}"

#
# SSH (geerlingguy.security)
#
security_ssh_port: 69

security_sudoers_passwordless: ["{{ username }}"]

security_autoupdate_reboot: "true"

security_autoupdate_mail_to: "{{ email }}"

security_autoupdate_mail_on_error: true

#
# Enable/disable functionality
#
enable_nas_stuff: true

# Home automation

enable_deconz: false

enable_homeassistant: false

# Media

enable_plex: false

enable_jellyfin: false

enable_photoprism: false

enable_booksonic: false

# Yo-ho-ho

enable_deluge: false

enable_sonarr: false

enable_radarr: false

enable_openbooks: false

enable_jackett: false

# Public-facing services

enable_nextcloud: false

enable_vaultwarden: true

enable_seafile: true

enable_minio: true

enable_gitea: true

enable_swag: false

enable_bunkerized_nginx: false

enable_traefik: true

enable_quotes_api: true

enable_rustpad: false

enable_etherpad: true

enable_coder: true

enable_syncthing: true

# DDNS

enable_duckdns: false

enable_cloudflare_ddns: false

enable_ddclient: false

# VPN

enable_wireguard: false

enable_tailscale: true

enable_ikev2: false

# Homepages

enable_homer: true

enable_flame: false

# Misc

enable_unifi: false

enable_authelia: true

enable_pihole: false

enable_watchtower: false

enable_endlessh: false

enable_netdata: true

enable_prometheus: true

enable_scrutiny: true

enable_cloudflare_tunnel: true

#
# Time Machine
#
timemachine_root: /mnt/timemachine

timemachine_drive: /dev/disk/by-label/TimeMachine

enable_timemachine: false

#
# IKEv2
#
ikev2_ondemand: false

samba_server_string: "{{ hostname }}"

samba_users:
  - name: "{{ username }}"
    password: "{{ password }}"
  - name: "{{ additional_users[0].name }}"
    password: "{{ password2 }}"

samba_global_include: global-include.conf

samba_apple_extensions: yes

samba_mitigate_cve_2017_7494: false

samba_server_max_protocol: "SMB3"

samba_server_min_protocol: "SMB3"

samba_shares:
  - name: Trash
    guest_ok: no
    public: no
    read_only: no
    writable: yes
    owner: "{{ username }}"
    browseable: yes
    path: "{{ mergerfs_root }}"
    valid_users: "{{ username }}"
    write_list: "{{ username }}"

  - name: Downloads
    guest_ok: no
    public: no
    read_only: no
    writable: yes
    browseable: yes
    owner: "{{ username }}"
    path: "{{ mergerfs_root }}/Downloads"
    valid_users: "{{ username }}, {{ additional_users[0].name }}"
    write_list: "{{ username }}, {{ additional_users[0].name }}"

  - name: Media
    guest_ok: no
    public: no
    read_only: no
    writable: yes
    browseable: yes
    owner: "{{ username }}"
    path: "{{ mergerfs_root }}/Media"
    valid_users: "{{ username }}, {{ additional_users[0].name }}"
    write_list: "{{ username }}, {{ additional_users[0].name }}"

  - name: TimeMachine
    guest_ok: no
    public: no
    read_only: no
    owner: "{{ username }}"
    vfs_objects:
      - name: fruit
        options:
          - name: time machine
            value: "yes"
      - name: streams_xattr
    writable: yes
    browseable: yes
    path: "{{ timemachine_root }}"
    valid_users: "{{ username }}"
    write_list: "{{ username }}"

#
# Snapraid and MergerFS
#
mergerfs_root: /mnt/storage

cache_root: /mnt/storage_cache

enable_mergerfs: yes

disks:
  - {
      path: /mnt/data0,
      src: /dev/disk/by-uuid/a7dad242-02c3-4932-a0ab-e041846ea4da,
      content: true,
    }
  - {
      path: /mnt/data1,
      src: /dev/disk/by-uuid/2505363e-f46f-4acb-a83a-69aa6d501e8e,
      content: true,
    }

cache_disks:
  []
  # - { path: /mnt/cache1, src: /dev/disk/by-label/Cache1, content: true }
  # - { path: /mnt/cache2, src: /dev/disk/by-label/Cache2, content: true }

parity_disks:
  - {
      path: /mnt/parity0,
      src: /dev/disk/by-uuid/a0bc8116-e9ed-4f94-b0aa-d0f34f866421,
      content: true,
    }

snapraid_data_disks: "{{ disks }}"

snapraid_parity_disks: "{{ parity_disks }}"

snapraid_runner_email_address: "{{ alert_email }}"

snapraid_runner_gmail_pass: "{{ alert_email_password }}"

snapraid_runner_email_address_from: "{{ snapraid_runner_email_address }}"

snapraid_runner_email_address_to: "{{ alert_email_to }}"

snapraid_runner_healthcheck_io_uuid: ""
snapraid_healthcheck_io_host: https://hc-ping.com

snapraid_sync_healthcheck_io_uuid: ""
snapraid_scrub_healthcheck_io_uuid: ""
snapraid_smart_healthcheck_io_uuid: ""
snapraid_status_healthcheck_io_uuid: ""

snapraid_runner_command: "{% if snapraid_runner_healthcheck_io_uuid %} curl -fsS -m 10 --retry 5 -o /dev/null {{ snapraid_healthcheck_io_host }}/{{ snapraid_runner_healthcheck_io_uuid }}/start > /dev/null{% endif %} && python3 {{ snapraid_runner_bin }} -c {{ snapraid_runner_conf }} > /tmp/snapraid-runner-cron-logs.txt 2>&1 {% if snapraid_runner_healthcheck_io_uuid %} ; echo \"$?\" > /tmp/snapraid-runner-exit-code; curl -fsS -m 10 --retry 5 -o /dev/null --data-binary \"@/tmp/snapraid-runner-cron-logs.txt\" \"{{ snapraid_healthcheck_io_host }}/{{ snapraid_runner_healthcheck_io_uuid }}/$(cat /tmp/snapraid-runner-exit-code)\" > /dev/null{% endif %}"

snapraid_smart_command: "{% if snapraid_smart_healthcheck_io_uuid %} curl -fsS -m 10 --retry 5 -o /dev/null {{ snapraid_healthcheck_io_host }}/{{ snapraid_smart_healthcheck_io_uuid }}/start > /dev/null{% endif %}; PATH=\"$PATH:/usr/sbin:/usr/local/bin\" snapraid smart > /tmp/snapraid-smart-cron-logs.txt 2>&1; echo \"$?\" > /tmp/snapraid-smart-exit-code; {% if snapraid_smart_healthcheck_io_uuid %} curl -fsS -m 10 --retry 5 -o /dev/null --data-binary \"@/tmp/snapraid-smart-cron-logs.txt\" \"{{ snapraid_healthcheck_io_host }}/{{ snapraid_smart_healthcheck_io_uuid }}/$(cat /tmp/snapraid-smart-exit-code)\" > /dev/null{% endif %}"

snapraid_status_command: "{% if snapraid_status_healthcheck_io_uuid %} curl -fsS -m 10 --retry 5 -o /dev/null {{ snapraid_healthcheck_io_host }}/{{ snapraid_status_healthcheck_io_uuid }}/start > /dev/null{% endif %}; PATH=\"$PATH:/usr/sbin:/usr/local/bin\" snapraid status > /tmp/snapraid-status-cron-logs.txt 2>&1; echo \"$?\" > /tmp/snapraid-status-exit-code; {% if snapraid_status_healthcheck_io_uuid %} curl -fsS -m 10 --retry 5 -o /dev/null --data-binary \"@/tmp/snapraid-status-cron-logs.txt\" \"{{ snapraid_healthcheck_io_host }}/{{ snapraid_status_healthcheck_io_uuid }}/$(cat /tmp/snapraid-status-exit-code)\" > /dev/null{% endif %}"

# Stop all the docker containers, backup the {{ docker_dir }} to the MergerFS pool, execute the snapraid runner and start the containers back up
# Stopping the containers is necessary â€“ backing up the data folder with the containers running will result in corrputed database files and no files can be changed during the Snapraid sync
snapraid_runner_cron_jobs:
  - {
      job: "docker stop $(docker ps -q); rsync -avz --delete --exclude cache {{ docker_dir }} {{ mergerfs_root }}/docker_data; {{ snapraid_runner_command }} ; docker start $(docker ps -a -q)",
      name: "snapraid_runner",
      weekday: "0",
      hour: "3",
    }
  - {
      job: "{{ snapraid_smart_command }}",
      name: "snapraid_smart",
      hour: "4"
    }
  - {
      job: "{{ snapraid_status_command }}",
      name: "snapraid_status",
      hour: "2"
    }

snapraid_sync_schedule:
  minute: 0
  hour: 3

snapraid_scrub_schedule:
  minute: 0
  hour: 2
  weekday: 0

snapraid_runner_delete_threshold: 999999

snapraid_runner_email_sendon: "success,error"

snapraid_runner_use_ssl: true

snapraid_content_files: []

snapraid_config_excludes:
  - "*.unrecoverable"
  - /lost+found/
  - "*.!sync"
  - /tmp/
  - "/Downloads/*"

#
# SMART error reporting
#
smartd_default_mail_recipients: ["{{ alert_email }}"]

#
# Security
#
enable_crowdsec: true

enable_iptables: true

enable_fail2ban: true

# We have our own f2b rules
security_fail2ban_enabled: false

# Ansible ssh port
ansible_ssh_port: 69

# Yubico API client ID
yubico_client_id: ''

### BEGIN Secret variables (encrypt and put into vault.yml)
cloudflare_dns_token: ''
cloudflare_email: ''
cloudflare_global_api_key: ''
cloudflare_firewall_token: ''
email: ''
email_password: ''
alert_email_to: ''
alert_email: ''
alert_email_password: ''
host: ''
host_local: ''
ikev2_excludedssids: ''
namecheap_host: ''
namecheap_token: ''
password: ''
photoprism_password: ''
pihole_password: ''
pikvm_password: ''
piped_postgresql_password: ''
ssh_public_key: ''
swag_htpasswd_password: ''
swag_htpasswd_user: ''
vpn_host: ''
vpn_password: ''
blog_host: ''
tailscale_auth_key: ''
seafile_password: ''
mysql_root_password: ''
mysql_seafile_password: ''
mysql_gitea_password: ''
mysql_etherpad_password: ''
etherpad_admin_password: ''
authelia_email: ''
authelia_displayname: ''
authelia_password: ''
authelia_jwt_secret: ''
authelia_session_secret: ''
authelia_storage_key: ''
minio_root_user: ''
minio_root_password: ''
coder_postgres_password: ''
cloudflare_tunnel_token: ''
cloudflare_tunnel_uuid: ''
yubico_secret_key: ''
### END Secret variables (encrypt and put into vault.yml)
